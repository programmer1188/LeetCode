Problem 1:

Leetcode 217. Contains Duplicate

https://leetcode.com/problems/contains-duplicate/

Python3 code:

#Hashset  Time -> O(n) Space -> O(n)
class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        hashset = set()  #create a hashset and insert each element in list to hashset

        for i in nums:
            if i in hashset:  #check element is alredy in the hashset
                return True
            hashset.add(i)
        return False  #If no duplicate element in list return False


#Sort List  Time -> O(nlogn) Space -> O(1)
class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        nums.sort()  #Sort the List
        for i in range(len(nums)-1):  #Check if next element is same as previous element 
            if nums[i+1]==nums[i]:  
                return True
        return False

Problem 2:

242. Valid Anagram

https://leetcode.com/problems/valid-anagram/description/

Python3 code:

# Two Hashmaps  Time -> O(S+T) O(n) Space -> O(S+T) O(n)  
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        if len(s) != len(t):  #check length of two strings if not equal then anagram is not possible
            return False

        frequency1 = {}  #create two dictionaries(hashmap) to store the frquency of letters in both strings
        frequency2 = {}

        for i in range(len(s)):  #add frequency for each letter
            frequency1[s[i]] = 1 + frequency1.get(s[i], 0)
            frequency2[t[i]] = 1 + frequency2.get(t[i], 0)
        return frequency1 == frequency2  #if both have same numbers of letter frequencies then it return true
 
 
# sorted() strings  Time -> O(nlogn) Space -> O(1)
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        if len(s)!=len(t):
            return False

        s = sorted(s) # ['a', 'a', 'a', 'g', 'm', 'n', 'r']
        t = sorted(t) # ['a', 'a', 'a', 'g', 'm', 'n', 'r']

        return s==t


Problem 3:

1. Two Sum

Python3 code:

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        hashmap = {} #To store value and its index

        for index, value in enumerate(nums):
            difference = target - value  #caluculate difference between Target value and the list value 
            if difference in hashmap:    #If difference value is present in hashmap then return difference value index and and current index 
                return [hashmap[difference], index]
            hashmap[value] = index
        return    

Problem 4:
49. Group Anagrams  - Time O(m*n) Space (m*n)
https://leetcode.com/problems/group-anagrams/description/
class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        result = defaultdict(list)
        
        for s in strs:
            
            count = [0] * 26  #a-z 0's
            
            for c in s:
                count[ord(c) - ord("a")] += 1
            
            #list in Python are mutable and thus cannot be used as keys in another dictionary. To solve this issue, you can convert the list of frequencies to a tuple, since tuples are immutable and can be used as keys    
            result[tuple(count)].append(s)   
        
        return result.values() 
            
            
Problem 5:
347. Top K Frequent Elements
https://leetcode.com/problems/top-k-frequent-elements/description/

class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        #we use bucket sort to solve this problem in O(n) 
        
        hashMap = {}

        #index is the frequency of an element and value is the list values which occured index number of times
        #list of lists with length of nums + 1
        freq = [[] for i in range(len(nums) + 1)]  

        #Map to store frequency of nums
        for i in nums:
            hashMap[i] = 1 + hashMap.get(i,0)

        #append the values to frequency of numbers
        for n,c in hashMap.items():
            freq[c].append(n)

        result = []
        
        #start from last element to first and decrrement by 1 each time
        for i in range(len(freq) -1, 0, -1):
            for n in freq[i]:
                result.append(n)
                if len(result) == k:  
                    return result

Problem 6:
238. Product of Array Except Self
https://leetcode.com/problems/product-of-array-except-self/description/

Time - O(n) Space O(n)
class Solution:
def productExceptSelf(self, nums: List[int]) -> List[int]:
    #result array with 1's
    result = [1] * (len(nums))

    #first calculate the prefix product before index
    prefix = 1
    for i in range(len(nums)):
        result[i] = prefix
        prefix *= nums[i]

    #Calculate Postfix product after index
    postfix = 1
    for i in range(len(nums) -1, -1, -1):
        result[i] *= postfix
        postfix *=  nums[i]

    return result







