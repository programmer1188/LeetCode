Problem 1:

Leetcode 217. Contains Duplicate

https://leetcode.com/problems/contains-duplicate/

Python3 code:

#Hashset  Time -> O(n) Space -> O(n)
class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        hashset = set()  #create a hashset and insert each element in list to hashset

        for i in nums:
            if i in hashset:  #check element is alredy in the hashset
                return True
            hashset.add(i)
        return False  #If no duplicate element in list return False


#Sort List  Time -> O(nlogn) Space -> O(1)
class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        nums.sort()  #Sort the List
        for i in range(len(nums)-1):  #Check if next element is same as previous element 
            if nums[i+1]==nums[i]:  
                return True
        return False

Problem 2:

242. Valid Anagram

https://leetcode.com/problems/valid-anagram/description/

Python3 code:

# Two Hashmaps  Time -> O(S+T) O(n) Space -> O(S+T) O(n)  
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        if len(s) != len(t):  #check length of two strings if not equal then anagram is not possible
            return False

        frequency1 = {}  #create two dictionaries(hashmap) to store the frquency of letters in both strings
        frequency2 = {}

        for i in range(len(s)):  #add frequency for each letter
            frequency1[s[i]] = 1 + frequency1.get(s[i], 0)
            frequency2[t[i]] = 1 + frequency2.get(t[i], 0)
        return frequency1 == frequency2  #if both have same numbers of letter frequencies then it return true
 
 
# sorted() strings  Time -> O(nlogn) Space -> O(1)
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        if len(s)!=len(t):
            return False

        s = sorted(s) # ['a', 'a', 'a', 'g', 'm', 'n', 'r']
        t = sorted(t) # ['a', 'a', 'a', 'g', 'm', 'n', 'r']

        return s==t


Problem 3:

1. Two Sum

Python3 code:

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        hashmap = {} #To store value and its index

        for index, value in enumerate(nums):
            difference = target - value  #caluculate difference between Target value and the list value 
            if difference in hashmap:    #If difference value is present in hashmap then return difference value index and and current index 
                return [hashmap[difference], index]
            hashmap[value] = index
        return    
