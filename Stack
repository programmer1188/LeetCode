20. Valid Parentheses

https://leetcode.com/problems/valid-parentheses/description/


class Solution:
    def isValid(self, s: str) -> bool:
        #Create a Map to store opening and closing bracket as key value pair using          dictionary
        Map = {")":"(", "]":"[", "}":"{"}
        stack = [] #empty 

        for c in s:  #for each character in string
            if c in Map:  #checks if the character is a closing parenthesis
                if stack and stack[-1] == Map[c]:  #if stack is not empty and top of stack is equal to the value of key in Map then pop the top of the stack
                    stack.pop()
                else:                
                    return False
            else:
                stack.append(c)  #Add all open parentheses to stack
        
        #if stack is empty return True
        if stack: 
            return False
        else:
            return True


155. Min Stack

https://leetcode.com/problems/min-stack/description/

Time -> O(1) Space -> o(n)

 class MinStack:

    def __init__(self):
        self.stack = []
        self.minStack = []

    def push(self, val: int) -> None:
        self.stack.append(val)
        val = min(val, self.minStack[-1] if self.minStack else val)
        self.minStack.append(val)

    def pop(self) -> None:
        self.stack.pop()
        self.minStack.pop()

    def top(self) -> int:
        return self.stack[-1]
        
    def getMin(self) -> int:
        return self.minStack[-1]
                


150. Evaluate Reverse Polish Notation

https://leetcode.com/problems/evaluate-reverse-polish-notation/

Time -> O(n) Space -> O(n)

class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        stack = []

        for i in tokens:
            if i == '+':
                num1 = stack.pop()
                num2 = stack.pop()
                stack.append(num2 + num1)
            elif i == '-':
                num1 = stack.pop()
                num2 = stack.pop()
                stack.append(num2 - num1)
            elif i == '*':
                num1 = stack.pop()
                num2 = stack.pop()
                stack.append(num2 * num1)
            elif i == '/':
                num1 = stack.pop()
                num2 = stack.pop()
                stack.append(int(num2 / num1))
            else:
                stack.append(int(i))

        return stack[0]         



22. Generate Parentheses
https://leetcode.com/problems/generate-parentheses/
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:

        res = []
        stack = []

        def backtrack(openN, closeN):
            if openN == closeN == n:
                res.append("".join(stack))
                return
            
            if openN < n:
                stack.append("(")
                backtrack(openN + 1, closeN)
                stack.pop()
            
            if closeN < openN:
                stack.append(")")
                backtrack(openN, closeN + 1)
                stack.pop()
        
        backtrack(0,0)
        return res 

