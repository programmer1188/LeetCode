# Input: nums = [1,1,0,1,1,1]
  Output: 3
  Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.
  
class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int count = 0;
        int maxCount = 0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]==1){
                count++;
                if(count>maxCount){
                    maxCount=count;
                }
            }else{
                count=0;
            }
        }
        return maxCount;
    }
}


# Given an array nums of integers, return how many of them contain an even number of digits..
# Input: nums = [12,345,2,6,7896]
  Output: 2
  Explanation: 
  12 contains 2 digits (even number of digits). 
  345 contains 3 digits (odd number of digits). 
  2 contains 1 digit (odd number of digits). 
  6 contains 1 digit (odd number of digits). 
  7896 contains 4 digits (even number of digits). 
  Therefore only 12 and 7896 contain an even number of digits.
  
  
class Solution {
    public int findNumbers(int[] nums) {
        int count=0; int evenDigits=0;
        for(int i=0;i<nums.length;i++){
            while(nums[i]>0){
                nums[i] = nums[i]/10;
                count++;
            }
            if(count>0 && count%2==0){
                evenDigits++;
            }
            
            count=0;
        }
        
        return evenDigits;
    }
}


# Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.
# Input: nums = [-4,-1,0,3,10]
  Output: [0,1,9,16,100]
  Explanation: After squaring, the array becomes [16,1,0,9,100].
  After sorting, it becomes [0,1,9,16,100].

class Solution {
    public int[] sortedSquares(int[] nums) {

        for(int i=0;i<nums.length;i++){
            nums[i] = nums[i]*nums[i];
        }
        
        Arrays.sort(nums);  //Using Arrays.sort()
        
        return nums;
    }
}


# Duplicate Zeros
  Given a fixed-length integer array arr, duplicate each occurrence of zero, shifting the remaining elements to the right.
  Input: arr = [1,0,2,3,0,4,5,0]
  Output: [1,0,0,2,3,0,0,4]
  Explanation: After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4]



public class Main
{
	public static void main(String[] args) {
	    
	    int[] arr = new int[]{1,0,2,3,0,4,5,0};
	    
	    for(int i=0;i<arr.length-1;i++){
	        if(arr[i]==0){
	            
	            for(int j=arr.length-2;j>=i;j--){
	                arr[j+1]=arr[j];
	            }
	            i++;
	        }
	    }
	    
	    for(int i=0;i<arr.length;i++){
	        System.out.print(arr[i]+" ");
	    }
	}
}


# Merge Sorted Array
Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int size = nums1.length;
        
        int[] nums3 = new int[size];
        
        int i=0,j=0,k=0;
        
        while(i<m && j<n){
            if(nums1[i]<nums2[j]){
                nums3[k] = nums1[i];
                k++; i++;
            }else{
                nums3[k] = nums2[j];
                k++; j++;
            }
        }
        
        while(i < m){
            nums3[k] = nums1[i];
            k++; i++;
        }
        
        while(j < n){
            nums3[k] = nums2[j];
            k++; j++;
        }
        
        for(int a=0;a<nums3.length;a++){
            nums1[a] = nums3[a];
        }
    }
}


Approach 1: Two Pointers
Intuition

Since this question is asking us to remove all elements of the given value in-place, we have to handle it with O(1)O(1) extra space. 
We can keep two pointers i and j, where i is the slow-runner while j is the fast-runner.

Algorithm

When nums[j] equals to the given value, skip this element by incrementing j. As long as nums[j] != val 
we copy nums[j] to nums[i] and increment both indexes at the same time. Repeat the process until j reaches the end of the array and the new length is i.

This solution is very similar to the solution to Remove Duplicates from Sorted Array.

# Remove Element
Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.

Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.

Return k after placing the final result in the first k slots of nums.

Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.

Input: nums = [3,2,2,3], val = 3
Output: 2, nums = [2,2,_,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 2.
It does not matter what you leave beyond the returned k (hence they are underscores).


class Solution {
    public int removeElement(int[] nums, int val) {
		
        int i=0;
        
        for(int j=0;j<nums.length;j++){
            if(nums[j] != val){
                nums[i] = nums[j];
                i++;
            }
        }
        return i;
        
    }
}


# Remove Duplicates from Sorted Array


Input: nums = [1,1,2]
Output: 2, nums = [1,2,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]

class Solution {
    public int removeDuplicates(int[] nums) {
        int s=0;
        for(int i=1;i<nums.length;i++){
            if(nums[i]!=nums[s]){
                s++;
                nums[s] = nums[i];
            }
        }
        return s+1;
    }
}


#binary search 
Given an array arr of integers, check if there exists two integers N and M such that N is the double of M ( i.e. N = 2 * M).

Input: arr = [10,2,5,3]
Output: true
Explanation: N = 10 is the double of M = 5,that is, 10 = 2 * 5.

class Solution {
    public int binarySearch(int[] arr, int n){
        int s=0;
        int e=arr.length-1;
        
        while(s<=e){
            int mid = s+(e-s)/2;
            
            if(arr[mid]>n){
                e=mid-1;
            }else if(arr[mid]<n){
                s=mid+1;
            }else{
                return mid;
            }
            
        }
        return -1;
       
        
    }
    public boolean checkIfExist(int[] arr) {
        Arrays.sort(arr);
        
        for(int i=0;i<arr.length;i++){
            int n = 2*arr[i];
            int b = binarySearch(arr,n);
            
            if(b != i && b != -1){
                return true;
            }
            
        }
        
        return false;
    }
}


# Replace Elements with Greatest Element on Right Side
Input: arr = [17,18,5,4,6,1]
Output: [18,6,6,6,1,-1]
Explanation: 
- index 0 --> the greatest element to the right of index 0 is index 1 (18).
- index 1 --> the greatest element to the right of index 1 is index 4 (6).
- index 2 --> the greatest element to the right of index 2 is index 4 (6).
- index 3 --> the greatest element to the right of index 3 is index 4 (6).
- index 4 --> the greatest element to the right of index 4 is index 5 (1).
- index 5 --> there are no elements to the right of index 5, so we put -1.

public class Main
{
    
    public int[] replaceElements(int[] arr) {
        
        if(arr.length==1){
            arr[0]=-1;
            return arr;
        }
        
        int max = -1;
        
        for(int i = arr.length -1; i>= 0; i--){
            int temp = arr[i];
            
            arr[i] = max;
            max = Math.max(max, temp);
        }
        return arr;
    }
    
	public static void main(String[] args) {
	    Main myObj = new Main();
	    
	    int[] arr = new int[]{17,18,5,4,6,1};
	    
	    arr = myObj.replaceElements(arr);
	    
	    for(int i=0;i<arr.length;i++){
	        System.out.print(arr[i]+" ");
	    }
	}
}
