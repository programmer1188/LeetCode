# Input: nums = [1,1,0,1,1,1]
  Output: 3
  Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.
  
class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int count = 0;
        int maxCount = 0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]==1){
                count++;
                if(count>maxCount){
                    maxCount=count;
                }
            }else{
                count=0;
            }
        }
        return maxCount;
    }
}


# Given an array nums of integers, return how many of them contain an even number of digits..
# Input: nums = [12,345,2,6,7896]
  Output: 2
  Explanation: 
  12 contains 2 digits (even number of digits). 
  345 contains 3 digits (odd number of digits). 
  2 contains 1 digit (odd number of digits). 
  6 contains 1 digit (odd number of digits). 
  7896 contains 4 digits (even number of digits). 
  Therefore only 12 and 7896 contain an even number of digits.
  
  
class Solution {
    public int findNumbers(int[] nums) {
        int count=0; int evenDigits=0;
        for(int i=0;i<nums.length;i++){
            while(nums[i]>0){
                nums[i] = nums[i]/10;
                count++;
            }
            if(count>0 && count%2==0){
                evenDigits++;
            }
            
            count=0;
        }
        
        return evenDigits;
    }
}


# Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.
# Input: nums = [-4,-1,0,3,10]
  Output: [0,1,9,16,100]
  Explanation: After squaring, the array becomes [16,1,0,9,100].
  After sorting, it becomes [0,1,9,16,100].

class Solution {
    public int[] sortedSquares(int[] nums) {

        for(int i=0;i<nums.length;i++){
            nums[i] = nums[i]*nums[i];
        }
        
        Arrays.sort(nums);  //Using Arrays.sort()
        
        return nums;
    }
}
