125. Valid Palindrome

https://leetcode.com/problems/valid-palindrome/description/

class Solution:  O(n) O(1)
    def isPalindrome(self, s: str) -> bool:
        
        new_s = ""
        
        #48-57 (0-9) 65-90 (A-Z) 97-122(a-z)
        #if char in these alphanumric range then it adss char to new string
        for char in s:
            if (ord(char) >= 48 and ord(char) <= 57) or (ord(char) >= 65 and ord(char) <= 90) or (ord(char) >= 97 and ord(char) <= 122):
                new_s += char.lower()

        front = 0
        back = len(new_s) - 1

        while front < back:
            if new_s[front] == new_s[back]:
                front += 1
                back -= 1
            else:
                return False 
        return True
   

class Solution:      Time -> O(n)  Space -> 
    def isPalindrome(self, s: str) -> bool:
        s = s.lower() #Lower case all alphabets

        #Remove all non alphanumeric characters
        #Here Join takes all the ch from for loop and concatenate them to empty string and
        #assigns the string to s
        s = ''.join(ch for ch in s if ch.isalnum())
         
        #Use two pointer approach and check from front to back of the string
        l = 0
        r = len(s)-1
        while l < r:
            if s[l] != s[r]:
                return False
            l += 1
            r -= 1
        return True 
        

#Using own function to check the alphanumeric characters
class Solution:  Time -> O(n) Space ->O(1)
    def isPalindrome(self, s: str) -> bool:

        l = 0
        r = len(s) - 1
        while l < r:
            while l < r and not self.alphaNum(s[l]):
                l += 1
            while r > l and not self.alphaNum(s[r]):
                r -= 1
            if s[l].lower() != s[r].lower():
                return False
            l += 1
            r -= 1
        return True 

    def alphaNum(self, c):
        return (ord('A') <= ord(c) <= ord('Z') or
                ord('a') <= ord(c) <= ord('z') or
                ord('0') <= ord(c) <= ord('9'))



167. Two Sum II - Input Array Is Sorted
https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/

Time - O(n) Space - O(1)

class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        l = 0   #front
        r = len(numbers) - 1  #back

        while l < r:
            if numbers[l] + numbers[r] == target:
                return [l+1, r+1]
            elif numbers[l] + numbers[r] > target:
                r -= 1
            elif numbers[l] + numbers[r] < target:
                l += 1
        return 0
            
